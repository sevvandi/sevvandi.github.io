knitr::opts_chunk$set(cache=TRUE)
library(tsfeatures)
library(dplyr)
library(dobin)
library(ggplot2)
set.seed(1)
# Generate 6000 random normally distributed points for a time series
y <- rnorm(6000)
# Insert an additive outlier at position 1010
y[1010] <- 6
df <- cbind.data.frame(1:6000, y)
colnames(df) <- c("Index", "Value")
ggplot(df, aes(Index, Value)) + geom_point() + theme_bw()
# Split the time series into windows of length 50
my_data_list <- split(y, rep(1:120, each = 50))
# Compute features of each chunk using tsfeatues
ftrs <- tsfeatures(my_data_list)
head(ftrs)
ftrs %>% dobin(norm=2) -> out
coords <- as.data.frame(out$coords[ ,1:2])
colnames(coords) <- c("DC1", "DC2")
ggplot(coords, aes(DC1, DC2)) + geom_point() + theme_bw()
inds <- which(coords[ ,1] > 10)
inds
# First dobin vector
out$vec[ ,1]
colnames(ftrs)
# Make a dataframe from window 21
df2 <- cbind.data.frame((1000 + 1:50), my_data_list[[inds]])
colnames(df2) <- c("Index", "Value")
ggplot(df2, aes(Index, Value)) + geom_point() + geom_line() + theme_bw()
library(fpp)
library(ggplot2)
library(tsfeatures)
library(dobin)
library(tsdl)
install.packages("tsdl")
library(fpp)
library(ggplot2)
library(tsfeatures)
library(dobin)
library(tsdl)
devtools::install_github("FinYang/tsdl")
library(fpp)
library(ggplot2)
library(tsfeatures)
library(dobin)
library(tsdl)
tt <- tsdl[[77]]
autoplot(tt) +  ggtitle("Mad River near Springfield OH 1915- 1960") +
xlab("Year") +  ylab("Streamflow")
my_data_list <- split(tt, rep(1:23, each = 24))
# Compute features of each chunk using tsfeatues
ftrs <- tsfeatures(my_data_list)
ftrs[ ,4:7] %>% dobin() -> out
coords <- as.data.frame(out$coords[ ,1:2])
colnames(coords) <- c("DC1", "DC2")
ggplot(coords, aes(DC1, DC2)) + geom_point(size=2) + theme_bw()
ind <- which(coords[ ,1] > 1)
ind
df <- cbind.data.frame((11*24+1):(12*24), my_data_list[[ind]])
colnames(df) <- c("Index", "Streamflow")
ggplot(df, aes(Index, Streamflow)) + geom_point() + geom_line()
library(rmarkdown)
# Get list of Rmd files in _Rmd directory
rmd_files <- list.files("_Rmd", pattern = "*.Rmd", full.names = TRUE)
rmd_files
output_file <- file.path("_posts",
gsub(".Rmd$", ".md", basename(file)))
getwd()
# Use absolute paths
project_dir <- getwd() #"."  # Replace with your actual path
rmd_dir <- file.path(project_dir, "_Rmd")
posts_dir <- file.path(project_dir, "_posts")
posts_dir
# Check if directories exist
if (!dir.exists(rmd_dir)) {
stop("_Rmd directory not found at: ", rmd_dir)
}
if (!dir.exists(posts_dir)) {
stop("_posts directory not found at: ", posts_dir)
}
# Get list of Rmd files
rmd_files <- list.files(rmd_dir, pattern = "\\.Rmd$", full.names = TRUE)
if (length(rmd_files) == 0) {
stop("No .Rmd files found in: ", rmd_dir)
}
# Process each file
for (file in rmd_files) {
output_file <- file.path(posts_dir,
gsub("\\.Rmd$", ".md", basename(file)))
render(file, output_file = output_file)
}
install.packages("dimRed")
devtools::install_github("gdkrmr/dimRed")
install.packages("RSpectra")
knitr::opts_chunk$set(
fig.path = "../assets/images/posts/nonlinear_dim_red_anomaly/",  # Where to save files
fig.cap = " ",
fig.align = 'center'
)
library(dimRed)
set.seed(1)
theta <- seq(from = -1*pi, to = pi, by=0.01)
phi <- seq(from = 0, to= pi*2, by=0.01)
theta1 <- sample(theta, size=5*length(theta), replace=TRUE)
phi1 <- sample(phi, size=5*length(phi), replace=TRUE)
x <- cos(theta1)*cos(phi1)
y <- cos(theta1)*sin(phi1)
z <- sin(theta1)
df <- cbind.data.frame(x,y,z)
df1 <- df
dim(df)
oo <- matrix(c(0,0,0,0,0.2,-0.1), nrow=2, byrow = TRUE)
colnames(oo) <- colnames(df)
df <- rbind.data.frame(df, oo)
plot(df[ ,c(1,2)], pch=20)
points(df[3146:3147, ], pch=20, col=c("red", "green"), cex=2)
dd2 <- dimRedData(df)
emb2 <- embed(dd2, "Isomap", .mute = NULL, knn = 10)
embdat <- as.data.frame(emb2@data)
plot(embdat, pch=20,main="IsoMap embedding")
points(embdat[3146:3147, ],  pch=20, col=c("red", "green"), cex=2)
emb2 <- embed(dd2, "LLE", knn = 10)
emb2 <- embed(dd2, "LLE", knn = 10)
emb2 <- embed(dd2, "LaplacianEigenmaps", knn = 10)
install.packages("loe")
emb2 <- embed(dd2, "LaplacianEigenmaps", knn = 10)
emb2 <- embed(dd2, "LaplacianEigenmaps", knn = 10)
knitr::opts_chunk$set(
fig.path = "../assets/images/posts/nonlinear_dim_red_anomaly/",  # Where to save files
fig.cap = " ",
fig.align = 'center'
)
library(dimRed)
set.seed(1)
theta <- seq(from = -1*pi, to = pi, by=0.01)
phi <- seq(from = 0, to= pi*2, by=0.01)
theta1 <- sample(theta, size=5*length(theta), replace=TRUE)
phi1 <- sample(phi, size=5*length(phi), replace=TRUE)
x <- cos(theta1)*cos(phi1)
y <- cos(theta1)*sin(phi1)
z <- sin(theta1)
df <- cbind.data.frame(x,y,z)
df1 <- df
dim(df)
oo <- matrix(c(0,0,0,0,0.2,-0.1), nrow=2, byrow = TRUE)
colnames(oo) <- colnames(df)
df <- rbind.data.frame(df, oo)
plot(df[ ,c(1,2)], pch=20)
points(df[3146:3147, ], pch=20, col=c("red", "green"), cex=2)
dd2 <- dimRedData(df)
emb2 <- embed(dd2, "Isomap", .mute = NULL, knn = 10)
embdat <- as.data.frame(emb2@data)
plot(embdat, pch=20,main="IsoMap embedding")
points(embdat[3146:3147, ],  pch=20, col=c("red", "green"), cex=2)
emb2 <- embed(dd2, "LLE", knn = 10)
emb2 <- embed(dd2, "LaplacianEigenmaps", knn = 10)
emb2 <- embed(dd2, "LaplacianEigenmaps", knn = 10)
knitr::opts_chunk$set(
fig.path = "../assets/images/posts/nonlinear_dim_red_anomaly/",  # Where to save files
fig.cap = " ",
fig.align = 'center'
)
library(dimRed)
library(loe)
install.packages("loe")
